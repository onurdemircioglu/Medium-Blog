DROP TABLE MEDIAN_TABLE;
CREATE TABLE MEDIAN_TABLE COMPRESS AS

SELECT 100 AS CUSTOMER_ID, 19 AS TRANSACTION_AMOUNT, TO_DATE('25082023', 'DDMMYYYY') AS TRANSACTION_DATE FROM DUAL UNION ALL
SELECT 100 AS CUSTOMER_ID, 8 AS TRANSACTION_AMOUNT, TO_DATE('27082023', 'DDMMYYYY') AS TRANSACTION_DATE FROM DUAL UNION ALL
SELECT 100 AS CUSTOMER_ID, 7 AS TRANSACTION_AMOUNT, TO_DATE('29082023', 'DDMMYYYY') AS TRANSACTION_DATE FROM DUAL UNION ALL
SELECT 100 AS CUSTOMER_ID, 16 AS TRANSACTION_AMOUNT, TO_DATE('31082023', 'DDMMYYYY') AS TRANSACTION_DATE FROM DUAL UNION ALL
SELECT 100 AS CUSTOMER_ID, 3 AS TRANSACTION_AMOUNT, TO_DATE('03092023', 'DDMMYYYY') AS TRANSACTION_DATE FROM DUAL UNION ALL
SELECT 100 AS CUSTOMER_ID, 5 AS TRANSACTION_AMOUNT, TO_DATE('05092023', 'DDMMYYYY') AS TRANSACTION_DATE FROM DUAL UNION ALL
SELECT 100 AS CUSTOMER_ID, 2 AS TRANSACTION_AMOUNT, TO_DATE('06092023', 'DDMMYYYY') AS TRANSACTION_DATE FROM DUAL UNION ALL


SELECT 101 AS CUSTOMER_ID, 13 AS TRANSACTION_AMOUNT, TO_DATE('25082023', 'DDMMYYYY') AS TRANSACTION_DATE FROM DUAL UNION ALL
SELECT 101 AS CUSTOMER_ID, 22 AS TRANSACTION_AMOUNT, TO_DATE('27082023', 'DDMMYYYY') AS TRANSACTION_DATE FROM DUAL UNION ALL
SELECT 101 AS CUSTOMER_ID, 5 AS TRANSACTION_AMOUNT, TO_DATE('29082023', 'DDMMYYYY') AS TRANSACTION_DATE FROM DUAL UNION ALL
SELECT 101 AS CUSTOMER_ID, 9 AS TRANSACTION_AMOUNT, TO_DATE('31082023', 'DDMMYYYY') AS TRANSACTION_DATE FROM DUAL UNION ALL
SELECT 101 AS CUSTOMER_ID, 2 AS TRANSACTION_AMOUNT, TO_DATE('03092023', 'DDMMYYYY') AS TRANSACTION_DATE FROM DUAL UNION ALL
SELECT 101 AS CUSTOMER_ID, 13 AS TRANSACTION_AMOUNT, TO_DATE('05092023', 'DDMMYYYY') AS TRANSACTION_DATE FROM DUAL UNION ALL
SELECT 101 AS CUSTOMER_ID, 9 AS TRANSACTION_AMOUNT, TO_DATE('06092023', 'DDMMYYYY') AS TRANSACTION_DATE FROM DUAL
;
COMMIT;




SELECT A.*
    	,TRANSACTION_AMOUNT * 2 AS DOUBLE_OF_TRANSACTION
        ,CASE WHEN MY_MEDIAN >= TRANSACTION_AMOUNT * 2  THEN 'SEND ALERT' ELSE 'DO NOT SEND ALERT' END AS SEND_ALERT_STATUS
FROM
    (
    SELECT A.*
    		,CASE WHEN TRANSACTION_ORDER >= 3 THEN -- IT IS NOT CALCULATED UNTIL 3 TRANSACTIONS EXIST
    				CASE WHEN PREVIOUS_AMOUNT_1 <= PREVIOUS_AMOUNT_2 AND PREVIOUS_AMOUNT_2 <= PREVIOUS_AMOUNT_3 THEN PREVIOUS_AMOUNT_2
    						WHEN PREVIOUS_AMOUNT_1 <= PREVIOUS_AMOUNT_2 AND PREVIOUS_AMOUNT_1 <= PREVIOUS_AMOUNT_3 AND PREVIOUS_AMOUNT_3 <= PREVIOUS_AMOUNT_2 THEN PREVIOUS_AMOUNT_3
    						WHEN PREVIOUS_AMOUNT_2 <= PREVIOUS_AMOUNT_1 AND PREVIOUS_AMOUNT_1 <= PREVIOUS_AMOUNT_3 AND PREVIOUS_AMOUNT_2 <= PREVIOUS_AMOUNT_3 THEN PREVIOUS_AMOUNT_1
    						WHEN PREVIOUS_AMOUNT_1 <= PREVIOUS_AMOUNT_2 AND PREVIOUS_AMOUNT_3 <= PREVIOUS_AMOUNT_1 AND PREVIOUS_AMOUNT_3 <= PREVIOUS_AMOUNT_2 THEN PREVIOUS_AMOUNT_1
    						WHEN PREVIOUS_AMOUNT_2 <= PREVIOUS_AMOUNT_1 AND PREVIOUS_AMOUNT_3 <= PREVIOUS_AMOUNT_1 AND PREVIOUS_AMOUNT_2 <= PREVIOUS_AMOUNT_3 THEN PREVIOUS_AMOUNT_3
    						WHEN PREVIOUS_AMOUNT_3 <= PREVIOUS_AMOUNT_1 AND PREVIOUS_AMOUNT_3 <= PREVIOUS_AMOUNT_2 AND PREVIOUS_AMOUNT_2 <= PREVIOUS_AMOUNT_1 THEN PREVIOUS_AMOUNT_2
    				END
    		END AS MY_MEDIAN
    FROM
        (
        SELECT A.*
                ,LAG ( TRANSACTION_AMOUNT, 0 ) OVER ( PARTITION BY CUSTOMER_ID ORDER BY TRANSACTION_DATE) AS PREVIOUS_AMOUNT_1
                ,LAG ( TRANSACTION_AMOUNT, 1 ) OVER ( PARTITION BY CUSTOMER_ID ORDER BY TRANSACTION_DATE) AS PREVIOUS_AMOUNT_2
                ,LAG ( TRANSACTION_AMOUNT, 2 ) OVER ( PARTITION BY CUSTOMER_ID ORDER BY TRANSACTION_DATE) AS PREVIOUS_AMOUNT_3
    			,ROW_NUMBER() OVER (PARTITION BY CUSTOMER_ID ORDER BY TRANSACTION_DATE) AS TRANSACTION_ORDER
        FROM MEDIAN_TABLE A
        ) A
    WHERE 1=1
    ) A
;
