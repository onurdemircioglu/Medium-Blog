DROP TABLE MEDIAN_TABLE;
CREATE TABLE MEDIAN_TABLE COMPRESS AS

SELECT 100 AS CUSTOMER_ID, 5 AS TRANSACTION_AMOUNT, TO_DATE('25082023', 'DDMMYYYY') AS TRANSACTION_DATE FROM DUAL UNION ALL
SELECT 100 AS CUSTOMER_ID, 12 AS TRANSACTION_AMOUNT, TO_DATE('27082023', 'DDMMYYYY') AS TRANSACTION_DATE FROM DUAL UNION ALL
SELECT 100 AS CUSTOMER_ID, 7 AS TRANSACTION_AMOUNT, TO_DATE('29082023', 'DDMMYYYY') AS TRANSACTION_DATE FROM DUAL UNION ALL
SELECT 100 AS CUSTOMER_ID, 14 AS TRANSACTION_AMOUNT, TO_DATE('31082023', 'DDMMYYYY') AS TRANSACTION_DATE FROM DUAL UNION ALL
SELECT 100 AS CUSTOMER_ID, 20 AS TRANSACTION_AMOUNT, TO_DATE('03092023', 'DDMMYYYY') AS TRANSACTION_DATE FROM DUAL UNION ALL
SELECT 100 AS CUSTOMER_ID, 30 AS TRANSACTION_AMOUNT, TO_DATE('05092023', 'DDMMYYYY') AS TRANSACTION_DATE FROM DUAL UNION ALL
SELECT 100 AS CUSTOMER_ID, 20 AS TRANSACTION_AMOUNT, TO_DATE('06092023', 'DDMMYYYY') AS TRANSACTION_DATE FROM DUAL
;
COMMIT;




SELECT A.*
        ,CASE WHEN TRANSACTION_AMOUNT >= MY_MEDIAN * 2 THEN 'SEND ALERT' ELSE 'DO NOT SEND ALERT' END AS SEND_ALERT_STATUS
FROM
    (
    SELECT A.*
            ,CASE WHEN TRANSACTION_ORDER > 3 THEN -- IT IS NOT CALCULATED UNTIL LAST 3 TRANSACTION EXIST.
                    CASE WHEN PREVIOUS_AMOUNT_1 <= PREVIOUS_AMOUNT_2 THEN
                                CASE WHEN PREVIOUS_AMOUNT_2 <= PREVIOUS_AMOUNT_3 THEN PREVIOUS_AMOUNT_2
                                        WHEN PREVIOUS_AMOUNT_2 >= PREVIOUS_AMOUNT_3 THEN PREVIOUS_AMOUNT_1
                                END
                            WHEN PREVIOUS_AMOUNT_2 <= PREVIOUS_AMOUNT_3 THEN
                                CASE WHEN PREVIOUS_AMOUNT_1 <= PREVIOUS_AMOUNT_3 THEN PREVIOUS_AMOUNT_1
                                        WHEN PREVIOUS_AMOUNT_1 >= PREVIOUS_AMOUNT_3 THEN PREVIOUS_AMOUNT_3
                                END
                            ELSE PREVIOUS_AMOUNT_2
                    END
            END AS MY_MEDIAN
    FROM
        (
        SELECT A.*
                ,LAG ( TRANSACTION_AMOUNT, 1 ) OVER ( PARTITION BY CUSTOMER_ID ORDER BY TRANSACTION_DATE) AS PREVIOUS_AMOUNT_1
                ,LAG ( TRANSACTION_AMOUNT, 2 ) OVER ( PARTITION BY CUSTOMER_ID ORDER BY TRANSACTION_DATE) AS PREVIOUS_AMOUNT_2
                ,LAG ( TRANSACTION_AMOUNT, 3 ) OVER ( PARTITION BY CUSTOMER_ID ORDER BY TRANSACTION_DATE) AS PREVIOUS_AMOUNT_3
    			,ROW_NUMBER() OVER (PARTITION BY CUSTOMER_ID ORDER BY TRANSACTION_DATE) AS TRANSACTION_ORDER
        FROM MEDIAN_TABLE A
        ) A
    WHERE 1=1
    ) A
;
