DROP TABLE MEDIAN_TABLE_RESULT;
CREATE TABLE MEDIAN_TABLE_RESULT AS

SELECT A.*
        ,ROW_NUMBER() OVER (PARTITION BY CUSTOMER_ID ORDER BY TRANSACTION_DATE) AS TRANSACTION_ORDER
        ,CAST(NULL AS NUMBER) AS MY_MEDIAN_CALCULATION
        ,CAST(NULL AS VARCHAR2(100)) AS MY_RESULT
FROM MEDIAN_TABLE A -- Using the table whcih is created in SQL_SOLUTION.sql file  
;
COMMIT;




DECLARE
    -- DECLARING VARIABLES
    V_CUSTOMER_ID NUMBER;
    V_TRANSACTION_AMOUNT NUMBER;
    V_TRANSACTION_DATE DATE;
    V_TRANSACTION_ORDER NUMBER;
    V_MY_MEDIAN_CALC NUMBER;
    V_HOW_MANY_TRANSACTIONS NUMBER := 3; -- TO DEFINE HOW MANY TRANSACTIONS FROM THE LAST WILL BE SELECTED
    
    -- DECLARE A CURSOR TO FETCH DISTINCT CUSTOMER_IDs
    CURSOR customer_cursor IS
        SELECT DISTINCT CUSTOMER_ID
        FROM MEDIAN_TABLE
        ORDER BY 1
        ;
BEGIN
    -- OPEN THE CURSORS
    OPEN customer_cursor;
    
    -- LOOP THROUGH EACH CUSTOMER
    LOOP
        -- FETCH EACH CUSTOMER_ID INTO VARIABLE
        FETCH customer_cursor INTO V_CUSTOMER_ID;
        
        -- EXIT THE LOOP IF NOR MORE ROWS TO FETCH (ALL CUSTOMERS ARE PROCESSED OF CURSORS IS EMPTY)
        EXIT WHEN customer_cursor%NOTFOUND;
        
        -- RETRIEVE TRANSACTION DATA FOR SELECTED CUSTOMER
        FOR transaction_data IN
            (
            SELECT CUSTOMER_ID, TRANSACTION_ORDER
            FROM MEDIAN_TABLE_RESULT
            WHERE 1=1
                AND CUSTOMER_ID = V_CUSTOMER_ID
            ORDER BY TRANSACTION_ORDER
            )
        LOOP
            -- ASSIGN TRANSACTION DATA RESULT TO A VARIABLE
            V_TRANSACTION_ORDER := transaction_data.TRANSACTION_ORDER;
            
            -- RUN THE ALGORITHM
            IF V_TRANSACTION_ORDER >= V_HOW_MANY_TRANSACTIONS THEN -- MINIMUM TRANSACTION COUNT TO CALCULATE
                SELECT MEDIAN(TRANSACTION_AMOUNT) INTO V_MY_MEDIAN_CALC
                FROM MEDIAN_TABLE_RESULT
                WHERE 1=1
                    AND CUSTOMER_ID = V_CUSTOMER_ID -- FOR SELECTED CUSTOMER
                    AND TRANSACTION_ORDER BETWEEN V_TRANSACTION_ORDER - (V_HOW_MANY_TRANSACTIONS - 1) AND V_TRANSACTION_ORDER -- TO SELECT PREDEFINED TRANSACTION COUNT FROM THE LAST
                ;
                
                
                UPDATE MEDIAN_TABLE_RESULT
                SET MY_MEDIAN_CALCULATION = V_MY_MEDIAN_CALC,
                        MY_RESULT = CASE WHEN V_MY_MEDIAN_CALC >= TRANSACTION_AMOUNT * 2 THEN 'SEND ALERT' ELSE 'DO NOT SEND ALERT' END
                WHERE 1=1
                    AND CUSTOMER_ID = V_CUSTOMER_ID
                    AND TRANSACTION_ORDER = V_TRANSACTION_ORDER -- TO UPDATE SPECIFIC ROW FOR TRANSACTION DATA OF SELECTED CUSTOMER
                ;
                COMMIT;
            ELSE
                -- UPDATE ONLY RESULT COLUMN IF THERE IS NO CALCULATION (MY_MEDIAN_CALCULATION COLUMN CAN BE NULL, IT IS OKAY)
                UPDATE MEDIAN_TABLE_RESULT
                SET MY_RESULT = 'NO CALCULATION' 
                WHERE 1=1
                    AND CUSTOMER_ID = V_CUSTOMER_ID
                    AND TRANSACTION_ORDER = V_TRANSACTION_ORDER
                ;
                COMMIT;
            
            END IF
            ;

        END LOOP;
        
    END LOOP;
    
    -- CLOSE THE CURSOR
    CLOSE customer_cursor;
END;
/
